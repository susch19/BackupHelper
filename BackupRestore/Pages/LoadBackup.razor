@page "/restore"
@using BackupRestore.Data;
@using Backup.Shared
@using System.Text;
@using Radzen.Blazor;
@using static System.Net.WebRequestMethods;
@inject RecoveryService RecoveryService

<PageTitle>Restore</PageTitle>

<h1>Restore</h1>



@if (fileInfos.Count < 1)
{
    <div class="row">
        <InputFile OnChange="@OnInputFileChange" accept=".metadata.zip.aes" />
    </div>
    <div class="row">
        <InputText @bind-Value="Password" type="password" placeholder="Password" />
    </div>
    <button class="row" type="submit" @onclick="LoadData">Load</button>
}
else if (storeView)
{
    <div class="toolbox row">
        <span>Speicherpfad:</span>
        <div />
        <div style="grid-column: 3 / span 9">
            <InputText style="width: 100%;" @bind-Value="path" />
        </div>
        <button @onclick="SaveBackup">Restore</button>
        <div />
        <button @onclick="Reset">New</button>

    </div>
    <Virtualize Context="context" ItemsProvider="@GetNodes" @ref="virtualizeComponent">
        <ShowItem Item=@context @key="context.node.FullPath">
            <div style="display: grid; grid-template-columns: 1em max-content 1em max-content; margin-left: @(context.level * 20)px">
                <svg viewBox="0 0 16 16" style="margin-top: 0.3rem;height: 1em; vertical-align: middle; transform: rotate(@(context.node.IsExpanded ? 90 : 0)deg); @(context.node.Children.Any() ? "cursor: pointer" : "")" @onclick="() => ChangeNode(context.node)" @onclick:stopPropagation>
                    <path d="M 4 2 l 7 6 l -7 6" stroke="@(context.node.Children.Any() ? "black" : "transparent")" fill="transparent" stroke-width="2" />
                </svg>
                <RadzenLabel Text="@context.node.Name" Style="margin-left: 8px; vertical-align: middle;" />
                <div />
                <div style="visibility:@(context.node.HistoryFileSelected == ushort.MaxValue ? "hidden" : "visible")">
                    @if (context.node.HistoryFileSelected != ushort.MaxValue)
                    {
                        @fileNameIndex.Index[context.node.HistoryFileSelected].CreateDate.ToShortDateString()
                    }
                </div>
            </div>
        </ShowItem>
    </Virtualize>
}
else
{
    <div class="toolbox row">
        <RadzenButton Click="()=>{ storeView = true; }" Text="Save" />
        <div></div>
        <RadzenButton Click="()=>{ fileInfos.Clear(); }" Text="Load" />
    </div>
    <div>
        @*<RadzenTextBox Placeholder="Search..." Change=@(args => { filter = args; virtualizeComponent?.RefreshDataAsync(); }) />*@
    </div>
    <Virtualize Context="context" ItemsProvider="@GetNodes" @ref="virtualizeComponent">
        <ShowItem Item=@context @key="context.node.FullPath">
            <div style="display: grid; grid-template-columns: 1em 1em max-content 1em max-content; margin-left: @(context.level * 20)px">
                <svg viewBox="0 0 16 16" style="margin-top: 0.3rem;height: 1em; vertical-align: middle; transform: rotate(@(context.node.IsExpanded ? 90 : 0)deg); @(context.node.Children.Any() ? "cursor: pointer" : "")" @onclick="() => ChangeNode(context.node)" @onclick:stopPropagation>
                    <path d="M 4 2 l 7 6 l -7 6" stroke="@(context.node.Children.Any() ? "black" : "transparent")" fill="transparent" stroke-width="2" />
                </svg>
                <RadzenCheckBox @bind-Value=@context.node.IsSelected TValue="bool" @onclick:stopPropagation />
                <RadzenLabel Text="@context.node.Name" Style="margin-left: 8px; vertical-align: middle;" />
                <div />
                <div style="visibility:@(context.node.BackupFileIndeces.Count == 0 ? "hidden" : "visible")">
                    <InputSelect @bind-Value="context.node.HistoryFileSelected">
                        @foreach (var item in context.node.BackupFileIndeces.Select(x => (id: x, index: fileNameIndex.Index[x])))
                        {
                            <option value="@item.id">@item.index.CreateDate.ToShortDateString()</option>
                        }
                    </InputSelect>
                </div>
                @*<div>
                        @foreach (var item in context.node.BackupFileIndeces.Select(x => fileNameIndex.Index[x]))
                        {
                            <span style="margin-left:1rem">@item.CreateDate.ToShortDateString()</span>
                        }
                    </div>*@
                @*<div class="dropdown">
                        <button @onclick="ToggleDropdown">
                            @string.Join(", ", context.node.HistoryFilesSelected.Select(x=> fileNameIndex.Index[x].CreateDate.ToShortDateString()))
                        </button>
                        <div class="dropdown-content" style="display:none">
                            <ul>
                                @foreach (var option in fileNameIndex.Index)
                                {
                                    <li>
                                        <input type="checkbox" @bind="option.IsSelected" @onclick="(e)=>context.node.HistoryFilesSelected" />
                                        <label>@option.Value.CreateDate.ToShortDateString()</label>
                                    </li>
                                }
                            </ul>
                        </div>
                        <input type="hidden" @bind="SelectedValues" />
                    </div>*@


                @*<InputSelect @bind-Value="context.node.HistoryFilesSelected">
                        @foreach (var item in context.node.BackupFileIndeces.Select(x => (id: x, name: fileNameIndex.Index[x].CreateDate.ToShortDateString())))
                        {
                            <option value="@item.id">@item.name</option>
                        }
                    </InputSelect>*@
                @*<div style="visibility:@(context.node.BackupFileIndeces.Count == 0 ? "hidden" : "visible")">

                    </div>*@
            </div>

        </ShowItem>
    </Virtualize>
}

@code {

    private string Password { get; set; }

    private List<FileDisplayInfo> fileInfos = new();
    private List<(FileDisplayInfo node, int level)> flatFileInfos = new();
    private BackupFileNameIndex fileNameIndex = new();
    private Virtualize<(BackupRestore.Data.FileDisplayInfo, int)>? virtualizeComponent;

    private string path = "";
    private string filter = "";
    private bool storeView = false;

    IBrowserFile? selectedFile;


    private void Reset()
    {
        storeView = false;
        filter = "";
        selectedFile = null;
        fileInfos.Clear();
        flatFileInfos.Clear();
        fileNameIndex = new();
    }

    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

    }

    private async Task LoadData()
    {
        if (selectedFile is null || selectedFile.Size < 1)
            return;

        Stream stream = selectedFile.OpenReadStream(512000000);
        using MemoryStream ms = new MemoryStream();
        await stream.CopyToAsync(ms);

        var uploadedFile = new MetaDataFileUpload();
        uploadedFile.FileName = selectedFile.Name;
        uploadedFile.FileContent = ms.ToArray();
        selectedFile = null;
        storeView = false;
        (fileNameIndex, fileInfos) = RecoveryService.GetBackupInformation(uploadedFile, Password);
        GenerateFlatList();
    }

    private ValueTask<ItemsProviderResult<(BackupRestore.Data.FileDisplayInfo node, int level)>> GetNodes(ItemsProviderRequest request)
    {
        (BackupRestore.Data.FileDisplayInfo node, int level)[] arr;
        //if (string.IsNullOrWhiteSpace(filter))
        arr = flatFileInfos
            .Where(x =>
            (x.node.Parent is null
                || x.node.Parent.IsExpanded)
            && (!storeView
                || (x.node.IsSelected
                    || x.node.AnyChildSelected)))
            .ToArray();
        //else
        //    arr = flatFileInfos.Where(x => MemoryExtensions.Contains(x.node.Name, filter, StringComparison.OrdinalIgnoreCase)
        //        || (MemoryExtensions.Contains(x.node.FullPath, filter, StringComparison.OrdinalIgnoreCase)
        //            && (x.node.Parent is null || x.node.Parent.IsExpanded))).ToArray();

        var items = arr.Skip(request.StartIndex).Take(request.Count);

        return new(new ItemsProviderResult<(BackupRestore.Data.FileDisplayInfo, int)>(
            items,
            arr.Length));
    }


    private void GenerateFlatList()
    {
        flatFileInfos.Clear();
        foreach (var node in fileInfos)
        {
            Stack<(FileDisplayInfo node, int level)> stack = new();
            stack.Push((node, 0));

            while (stack.Count > 0)
            {
                (FileDisplayInfo node, int level) current = stack.Pop();
                flatFileInfos.Add(current);
                if (!current.node.Children.Any())
                    current.node.HistoryFileSelected = current.node.BackupFileIndeces.Last();

                for (int i = current.node.Children.Count - 1; i >= 0; i--)
                {
                    stack.Push((current.Item1.Children[i], current.level + 1));
                }
            }
        }
    }

    private async Task SaveBackup()
    {
        await RecoveryService.RestoreFiles(path, Password, flatFileInfos.Select(x => x.node).Where(x => x.IsSelected && !x.Children.Any()).ToArray(), fileNameIndex);

    }
    private async Task ChangeNode(FileDisplayInfo node)
    {
        node.IsExpanded = !node.IsExpanded;
        await virtualizeComponent?.RefreshDataAsync();
    }

}
