@page "/restore"
@using Backup.Shared
@using BackupRestore.Data;
@using System.Text;
@using System.Text.RegularExpressions;
@using static System.Net.WebRequestMethods;
@inject RecoveryService RecoveryService

<PageTitle>Restore</PageTitle>

<h1>Restore</h1>

@if (fileInfos.Count < 1)
{
    <div class="metadata-select">
        <InputText placeholder="Metadata File Path" @bind-Value="filePath"></InputText>
        <div />
        <RadzenButton Click="SelectFilePath">Select File</RadzenButton>
    </div>
    <br />
    <div class="metadata-select">
        <InputText @bind-Value="Password" type="password" placeholder="Password" />

        <div />
        <RadzenButton type="submit" Click="LoadData">Load</RadzenButton>
    </div>
}
else if (storeView)
{
    <div class="store-grid">
        <div>
            <span>Speicherpfad:</span>
        </div>
        <div>
            <InputText @bind-Value="dirPath" />
        </div>
        <div>
            <RadzenButton Click="SelectDirPath">Select</RadzenButton>
        </div>
        <div>
            <RadzenButton Click="SaveBackup" disabled="@(string.IsNullOrWhiteSpace(dirPath) ? true : false)">Restore</RadzenButton>
        </div>
        <div>
            <RadzenButton Click="Reset">Start over</RadzenButton>
        </div>

    </div>
    <VirtualTreeView GetNodes="GetNodes" @ref="virtualTree" Selectable="false" ChangeNode="ChangeNode" FileNameIndex="@fileNameIndex" FilterDate="@filterDate" Password="@Password" />
}
else
{
    <div class="toolbox-grid">
        <RadzenButton Click="()=>{ ChangeToStoreView(); }" Text="Continue to Save" />
        <div></div>
        <RadzenButton Click="()=>{ fileInfos.Clear(); }" Text="Start over" />
    </div>
    <br />
    <RadzenCard>
        <div class="search-toolbox">
            @*<RadzenTextBox @bind-Value="@filter" @bind:event="oninput" @onkeypress="AutoSearch" />*@
            <input placeholder="Search" @bind="filter" @bind:event="oninput" @onkeydown=AutoSearch />
            <div />
            <RadzenCheckBox @bind-Value=fullTextSearch TValue="bool" @onclick:stopPropagation />
            <RadzenLabel Text="FullTextSearch" Style="margin-left: 8px; vertical-align: middle;" />
            <div />
            <RadzenButton Click="()=>{ Search(); }" Text="Search" />
            <div />
            <RadzenButton Click="()=>{ ClearFilter();  }" Text="Clear" />
        </div>
        <div style="margin-top: 16px">
            <RadzenLabel Text="Date minimum:" TextStyle="TextStyle.Subtitle2" style="width: 7.2rem" />
            <RadzenDatePicker @bind-Value="filterMinDate" DateFormat="d" Change="()=>ChangeTreeView()" DateRender=OnlyBackupDates />
        </div>
        <div style="margin-top: 16px">
            <RadzenLabel Text="Date maximum:" TextStyle="TextStyle.Subtitle2" style="width: 7.2rem" />
            <RadzenDatePicker @bind-Value="filterDate" DateFormat="d" Change="()=>ChangeTreeView()" DateRender=OnlyBackupDates />
        </div>
    </RadzenCard>
    <br />
    <VirtualTreeView GetNodes="GetNodes" @ref="virtualTree" Selectable="true" ChangeNode="ChangeNode" FileNameIndex="@fileNameIndex" FilterDate="@filterDate" Password="@Password" />
}

@code {

    private string Password { get; set; }
    bool mouseOverInput = false;

    private List<FileDisplayInfo> fileInfos = new();
    private List<(FileDisplayInfo node, int level)> flatFileInfos = new();
    private BackupFileNameIndex fileNameIndex = new();
    private VirtualTreeView? virtualTree;

    private string dirPath = "";
    private string filePath = "";

    private DateTime filterDate = DateTime.Now;
    private DateTime filterMinDate = DateTime.Now;
    private string filter = "";
    private bool fullTextSearch = false;
    private Regex? filterRegex = null;
    private bool storeView = false;
    (BackupRestore.Data.FileDisplayInfo node, int level)[]? arr;

    void OnlyBackupDates(DateRenderEventArgs args)
    {
        args.Disabled = args.Disabled || !fileNameIndex.Index.Any(x => x.Value.CreateDate.Date == args.Date);
    }

    private void AutoSearch(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
            Search();
    }

    private void ChangeToStoreView()
    {
        storeView = true;
        var minIndex = fileNameIndex.Index.MinBy(x => x.Value.CreateDate.Date >= filterMinDate).Key;
        var maxIndex = fileNameIndex.Index.MaxBy(x => x.Value.CreateDate.Date <= filterDate).Key;
        foreach (var item in flatFileInfos)
        {
            if (item.node.IsSelected && (item.node.HistoryFileSelected > maxIndex || item.node.HistoryFileSelected < minIndex))
            {
                foreach (var index in item.node.BackupFileIndeces)
                {
                    if ((index <= maxIndex 
                            && (item.node.HistoryFileSelected == uint.MaxValue 
                                || index > item.node.HistoryFileSelected))
                        || (index >= minIndex 
                            && (item.node.HistoryFileSelected == uint.MaxValue 
                                || index < item.node.HistoryFileSelected)))
                    {
                        item.node.HistoryFileSelected = index;

                    }
                }
                if (item.node.Children.Count == 0 && item.node.HistoryFileSelected == uint.MaxValue)
                    item.node.IsSelected = false;
            }
        }
        ChangeTreeView();
    }

    private void Search()
    {
        if (string.IsNullOrEmpty(filter))
            ClearFilter();
        else
            filterRegex = new Regex(filter);
        ChangeTreeView();
    }
    private void ClearFilter()
    {
        filterRegex = null;
        filter = "";
        ChangeTreeView();
    }
    private void Reset()
    {
        storeView = false;
        filter = "";
        fileInfos.Clear();
        flatFileInfos.Clear();
        fileNameIndex = new();
    }

    private void SelectFilePath()
    {
        filePath = RecoveryService.GetFilePath("metadata.zip.aes");
    }
    private void SelectDirPath()
    {
        dirPath = RecoveryService.GetDirectoryPath();
    }

    private async Task LoadData()
    {

        if (string.IsNullOrWhiteSpace(filePath))
            return;

        storeView = false;
        (fileNameIndex, fileInfos) = RecoveryService.GetBackupInformation(filePath, Password);
        GenerateFlatList();
        filterDate = fileNameIndex.Index.MaxBy(x => x.Value.CreateDate).Value.CreateDate.Date;
        filterMinDate = fileNameIndex.Index.MinBy(x => x.Value.CreateDate).Value.CreateDate.Date;
        await ChangeTreeView();
    }

    private async Task ChangeTreeView()
    {
        IEnumerable<(FileDisplayInfo node, int level)> filterEnumerable;
        if (filterRegex is null)
            filterEnumerable = flatFileInfos
                .Where(x =>
                    (x.node.Parent is null || x.node.Parent.IsExpanded)
                    && (!storeView
                        || (x.node.IsSelected || x.node.AnyChildSelected)));
        else
            filterEnumerable = flatFileInfos
                .Where(x => !storeView && FileDisplayInfo.Matches(x.node, filterRegex, fullTextSearch));

        filterEnumerable = filterEnumerable.Where(x => FileDisplayInfo.Matches(x.node, fileNameIndex, filterMinDate.Date, filterDate.Date));


        arr = filterEnumerable.ToArray();

        var virtComp = virtualTree;
        if (virtComp is not null)
            await virtComp?.RefreshDataAsync();
    }

    private ValueTask<ItemsProviderResult<(BackupRestore.Data.FileDisplayInfo node, int level)>> GetNodes(ItemsProviderRequest request)
    {
        var localArr = arr;
        if (localArr is null)
            localArr = Array.Empty<(BackupRestore.Data.FileDisplayInfo node, int level)>();

        var items = localArr.Skip(request.StartIndex).Take(request.Count);

        return new(new ItemsProviderResult<(BackupRestore.Data.FileDisplayInfo, int)>(
            items,
            localArr.Length));
    }


    private void GenerateFlatList()
    {
        flatFileInfos.Clear();
        foreach (var node in fileInfos)
        {
            Stack<(FileDisplayInfo node, int level)> stack = new();
            stack.Push((node, 0));

            while (stack.Count > 0)
            {
                (FileDisplayInfo node, int level) current = stack.Pop();
                flatFileInfos.Add(current);
                if (!current.node.Children.Any())
                    current.node.HistoryFileSelected = current.node.BackupFileIndeces.Last();

                for (int i = current.node.Children.Count - 1; i >= 0; i--)
                {
                    stack.Push((current.Item1.Children[i], current.level + 1));
                }
            }
        }
    }
    private void ChangeNode(FileDisplayInfo node)
    {
        node.IsExpanded = !node.IsExpanded;
        ChangeTreeView();
    }

    private void SaveBackup()
    {
        RecoveryService.RestoreFiles(dirPath, Password, flatFileInfos.Select(x => x.node).Where(x => x.IsSelected && !x.Children.Any()).ToArray(), fileNameIndex);

    }

}
